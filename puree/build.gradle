apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

def GROUP_ID = 'com.cookpad.puree'
def ARTIFACT_ID = 'puree'
def VERSION = "4.1.2"

project.version = VERSION
println "building ${GROUP_ID}:${ARTIFACT_ID}:${VERSION}"

android {
    compileSdkVersion BuildSettings.compileSdkVersion

    defaultConfig {
        minSdkVersion BuildSettings.minSdkVersion
        targetSdkVersion BuildSettings.targetSdkVersion
        versionCode 1
        versionName VERSION

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }
    sourceSets {
        test.java.srcDirs += "src/androidTest/java"
    }
}

android.libraryVariants.all { variant ->
    if (variant.buildType.isDebuggable()) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source

        // Add all of your dependencies and android jars to the classpath
        classpath += files(variant.javaCompile.classpath.files)
        classpath += files(android.getBootClasspath())
        exclude '**/BuildConfig.java'
        exclude '**/R.java'

        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        options.charSet("utf-8")
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

dependencies {
    api Libs.gson
    implementation Libs.jsr305

    testImplementation TestLibs.hamcrest
    testImplementation TestLibs.robolectric
    testImplementation TestLibs.androidXTestCore
    testImplementation TestLibs.androidXTestRunner
    testImplementation TestLibs.androidXTestJUnit

    androidTestImplementation TestLibs.hamcrest
    androidTestImplementation TestLibs.androidXTestCore
    androidTestImplementation TestLibs.androidXTestRunner
    androidTestImplementation TestLibs.androidXTestJUnit
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocJar(type: Jar) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives androidJar
    archives androidSourcesJar
    archives androidJavadocJar
}

publishing {
    publications {
        mavenAndroid(MavenPublication) {
            groupId GROUP_ID
            artifactId ARTIFACT_ID
            version VERSION
            artifact androidJar
            artifact androidSourcesJar
            artifact androidJavadocJar
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'puree')
                root.appendNode('description',
                        'Puree is a data collector for unified logging layer for Android.')
                root.appendNode('url', 'https://github.com/cookpad/puree-android')

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/coopad/puree-android/issues')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:https://github.com/cookpad/puree-android')
                scm.appendNode('connection', 'scm:git@github.com:puree/puree-android.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:puree/puree-android.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'MIT')
                license.appendNode('url',
                        'https://raw.githubusercontent.com/cookpad/puree-android/master/LICENSE.txt')
                license.appendNode('distribution', 'repo')
            }
        }
    }
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? bintrayUser : ""
}

def getBintrayKeyProperty() {
    return hasProperty('bintrayKey') ? bintrayKey : ""
}

def getBintrayDryRunProperty() {
    return hasProperty('dryRun') ? Boolean.parseBoolean(dryRun) : true
}

bintray {
    user = bintrayUserProperty
    key = bintrayKeyProperty
    dryRun = bintrayDryRunProperty
    publications = ['mavenAndroid']
    publish = true
    pkg {
        repo = 'maven'
        name = 'puree'
        licenses = ['MIT']
    }
}

// execute shell which publishes javadoc with version info
task deployJavadoc(type: Exec) {
    workingDir '../'
    executable "./deploy_javadoc.sh"
    args VERSION
}

// call deployJavadoc after bintrayUpload task
bintrayUpload.finalizedBy(deployJavadoc)
