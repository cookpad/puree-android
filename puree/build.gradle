apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }
}

android.libraryVariants.all { variant ->
    if (variant.buildType.isDebuggable()) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = System.getenv("ANDROID_HOME") +
                "/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

dependencies {
    compile 'com.google.code.findbugs:jsr305:3.0.0'

    androidTestCompile 'com.google.code.gson:gson:2.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidJar
    archives androidSourcesJar
}

version = "2.0.0"

publishing {
    publications {
        mavenAndroid(MavenPublication) {
            groupId 'com.cookpad'
            artifactId 'puree'
            version version
            artifact androidJar
            artifact androidSourcesJar
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'puree')
                root.appendNode('description',
                        'Puree is a data collector for unified logging layer for Android.')
                root.appendNode('url', 'https://github.com/cookpad/puree-android')

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/coopad/puree-android/issues')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'scm:https://github.com/cookpad/puree-android')
                scm.appendNode('connection', 'scm:git@github.com:puree/puree-android.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:puree/puree-android.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'MIT')
                license.appendNode('url',
                        'https://raw.githubusercontent.com/cookpad/puree-android/master/LICENSE.txt')
                license.appendNode('distribution', 'repo')
            }
        }
    }
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? bintrayUser : ""
}

def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? bintrayApiKey : ""
}

bintray {
    user = bintrayUserProperty
    key = bintrayApiKeyProperty
    publications = ['mavenAndroid']
    dryRun = false
    pkg {
        repo = 'maven'
        name = 'puree'
        licenses = ['MIT']
    }
}
